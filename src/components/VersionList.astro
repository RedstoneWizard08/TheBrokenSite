---
import { formatDate } from "date-fns";
import type { VersionItem } from "../lib/versions";
import { Icon } from "astro-icon/components";

interface Props {
    versions: VersionItem[];
}

const { versions } = Astro.props;
---

<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 w-full gap-4 p-4">
    {
        versions.map((ver) => (
            <div class="bg-dark-7 p-4 hover:scale-110 cursor-pointer hover:bg-dark-4 transition-all font-jbm flex flex-col items-start justify-start">
                <p class="font-bold flex flex-row items-center justify-start">
                    {ver.name}
                    
                    {ver.isUnsafe && (
                        <Icon
                            name="tabler:alert-triangle"
                            class="color-red ml-2"
                            size="22"
                        />
                    )}
                </p>

                {ver.published && (
                    <p class="text-sm text-gray">
                        Released on
                        <span class="text-light">
                            {formatDate(
                                new Date(ver.published),
                                "MMMM do, yyyy",
                            )}
                        </span>
                    </p>
                )}

                <div class="flex flex-row items-center justify-between w-full">
                    {ver.isUnsafe ? (
                        <a
                            href={`!!unsafe:${ver.download}`}
                            class="text-green flex flex-row items-center justify-start b-b-1 b-b-transparent hover:b-b-green transition-all mt-4"
                        >
                            Download
                            <Icon
                                name="tabler:download"
                                class="ml-2"
                                size="20"
                            />
                        </a>
                    ) : (
                        <a
                            href={ver.download}
                            class="text-green flex flex-row items-center justify-start b-b-1 b-b-transparent hover:b-b-green transition-all mt-4"
                        >
                            Download
                            <Icon
                                name="tabler:download"
                                class="ml-2"
                                size="20"
                            />
                        </a>
                    )}

                    {ver.changelog && (
                        <a
                            href={`javascript:showChangelog("${btoa(ver.changelog ?? "// None //")}");`}
                            class="text-blue flex flex-row items-center justify-start b-b-1 b-b-transparent hover:b-b-blue transition-all mt-4"
                        >
                            Changelog
                            <Icon
                                name="tabler:info-circle"
                                class="ml-2"
                                size="20"
                            />
                        </a>
                    )}
                </div>
            </div>
        ))
    }
</div>

<script>
    window.addEventListener("load", () => {
        const as = document.querySelectorAll("a");
        const repo = (document.getElementById("__repo") as HTMLMetaElement).content;
        const branch = (document.getElementById("__branch") as HTMLMetaElement).content;

        for (const a of as) {            
            if (a.href.includes("!!unsafe:/files/")) {
                const url = `${repo}/raw/${branch}/files/${a.href.split("/files/")[1]}`;

                a.href = `javascript:showUnsafe("${btoa(url)}");`;
            } else if (a.href.includes("/files/")) {
                a.href = `${repo}/raw/${branch}/files/${a.href.split("/files/")[1]}`;
            }
        }
    });
</script>
